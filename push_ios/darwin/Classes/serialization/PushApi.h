// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

/// # iOS UN (UserNotification) symbols
///
/// Dart/Flutter translation of the iOS permissions API. In a future release,
/// we may replace this API with a consistent API for all platforms that require
/// permissions to show notifications to the user.
/// UNAuthorizationStatus: Constants indicating whether the app is allowed to
/// schedule notifications.
///
/// See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unnotificationsettings/1648391-authorizationstatus) for more information
typedef NS_ENUM(NSUInteger, PUUNAuthorizationStatus) {
  PUUNAuthorizationStatusNotDetermined = 0,
  PUUNAuthorizationStatusDenied = 1,
  PUUNAuthorizationStatusAuthorized = 2,
  PUUNAuthorizationStatusProvisional = 3,
  PUUNAuthorizationStatusEphemeral = 4,
};

/// Wrapper for PUUNAuthorizationStatus to allow for nullability.
@interface PUUNAuthorizationStatusBox : NSObject
@property(nonatomic, assign) PUUNAuthorizationStatus value;
- (instancetype)initWithValue:(PUUNAuthorizationStatus)value;
@end

/// The type of notification the user will see
///
/// See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unalertstyle) for more information
typedef NS_ENUM(NSUInteger, PUUNAlertStyle) {
  PUUNAlertStyleNone = 0,
  PUUNAlertStyleBanner = 1,
  PUUNAlertStyleAlert = 2,
};

/// Wrapper for PUUNAlertStyle to allow for nullability.
@interface PUUNAlertStyleBox : NSObject
@property(nonatomic, assign) PUUNAlertStyle value;
- (instancetype)initWithValue:(PUUNAlertStyle)value;
@end

/// The current configuration of a notification setting
///
/// See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unnotificationsetting) for more information
typedef NS_ENUM(NSUInteger, PUUNNotificationSetting) {
  PUUNNotificationSettingNotSupported = 0,
  PUUNNotificationSettingDisabled = 1,
  PUUNNotificationSettingEnabled = 2,
};

/// Wrapper for PUUNNotificationSetting to allow for nullability.
@interface PUUNNotificationSettingBox : NSObject
@property(nonatomic, assign) PUUNNotificationSetting value;
- (instancetype)initWithValue:(PUUNNotificationSetting)value;
@end

/// Conditions to show/reveal notification content to the user
///
/// See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unshowpreviewssetting) for more information
typedef NS_ENUM(NSUInteger, PUUNShowPreviewsSetting) {
  PUUNShowPreviewsSettingAlways = 0,
  PUUNShowPreviewsSettingWhenAuthenticated = 1,
  PUUNShowPreviewsSettingNever = 2,
};

/// Wrapper for PUUNShowPreviewsSetting to allow for nullability.
@interface PUUNShowPreviewsSettingBox : NSObject
@property(nonatomic, assign) PUUNShowPreviewsSetting value;
- (instancetype)initWithValue:(PUUNShowPreviewsSetting)value;
@end

@class PURemoteMessage;
@class PUNotification;
@class PUUNNotificationSettings;

@interface PURemoteMessage : NSObject
+ (instancetype)makeWithNotification:(nullable PUNotification *)notification
    data:(nullable NSDictionary<NSString *, id> *)data;
@property(nonatomic, strong, nullable) PUNotification * notification;
@property(nonatomic, copy, nullable) NSDictionary<NSString *, id> * data;
@end

@interface PUNotification : NSObject
+ (instancetype)makeWithTitle:(nullable NSString *)title
    body:(nullable NSString *)body;
@property(nonatomic, copy, nullable) NSString * title;
@property(nonatomic, copy, nullable) NSString * body;
@end

/// The object for reading notification-related settings and the authorization status of your app.
///
/// See the [Apple documentation](https://developer.apple.com/documentation/usernotifications/unnotificationsettings) for more information
@interface PUUNNotificationSettings : NSObject
+ (instancetype)makeWithAuthorizationStatus:(nullable PUUNAuthorizationStatusBox *)authorizationStatus
    soundSetting:(nullable PUUNNotificationSettingBox *)soundSetting
    badgeSetting:(nullable PUUNNotificationSettingBox *)badgeSetting
    alertSetting:(nullable PUUNNotificationSettingBox *)alertSetting
    notificationCenterSetting:(nullable PUUNNotificationSettingBox *)notificationCenterSetting
    lockScreenSetting:(nullable PUUNNotificationSettingBox *)lockScreenSetting
    carPlaySetting:(nullable PUUNNotificationSettingBox *)carPlaySetting
    alertStyle:(nullable PUUNAlertStyleBox *)alertStyle
    showPreviewsSetting:(nullable PUUNShowPreviewsSettingBox *)showPreviewsSetting
    criticalAlertSetting:(nullable PUUNNotificationSettingBox *)criticalAlertSetting
    providesAppNotificationSettings:(nullable NSNumber *)providesAppNotificationSettings
    announcementSetting:(nullable PUUNNotificationSettingBox *)announcementSetting;
@property(nonatomic, strong, nullable) PUUNAuthorizationStatusBox * authorizationStatus;
@property(nonatomic, strong, nullable) PUUNNotificationSettingBox * soundSetting;
@property(nonatomic, strong, nullable) PUUNNotificationSettingBox * badgeSetting;
@property(nonatomic, strong, nullable) PUUNNotificationSettingBox * alertSetting;
@property(nonatomic, strong, nullable) PUUNNotificationSettingBox * notificationCenterSetting;
@property(nonatomic, strong, nullable) PUUNNotificationSettingBox * lockScreenSetting;
@property(nonatomic, strong, nullable) PUUNNotificationSettingBox * carPlaySetting;
@property(nonatomic, strong, nullable) PUUNAlertStyleBox * alertStyle;
@property(nonatomic, strong, nullable) PUUNShowPreviewsSettingBox * showPreviewsSetting;
@property(nonatomic, strong, nullable) PUUNNotificationSettingBox * criticalAlertSetting;
@property(nonatomic, strong, nullable) NSNumber * providesAppNotificationSettings;
@property(nonatomic, strong, nullable) PUUNNotificationSettingBox * announcementSetting;
@end

/// The codec used by PUPushHostApi.
NSObject<FlutterMessageCodec> *PUPushHostApiGetCodec(void);

@protocol PUPushHostApi
/// Returns null if it doesn't exist.
/// See [PushFlutterApi.onNotificationTap] to understand why a RemoteMessage is not provided here.
- (nullable NSDictionary<NSString *, id> *)getNotificationTapWhichLaunchedTerminatedAppWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)getTokenWithCompletion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
- (void)backgroundFlutterApplicationReadyWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)onListenToOnNewTokenWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)onCancelToOnNewTokenWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Pass true for the option you want permission to use
/// Returns true if permission was granted.
- (void)requestPermissionBadge:(BOOL)badge sound:(BOOL)sound alert:(BOOL)alert carPlay:(BOOL)carPlay criticalAlert:(BOOL)criticalAlert provisional:(BOOL)provisional providesAppNotificationSettings:(BOOL)providesAppNotificationSettings announcement:(BOOL)announcement completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
- (void)getNotificationSettingsWithCompletion:(void (^)(PUUNNotificationSettings *_Nullable, FlutterError *_Nullable))completion;
- (void)areNotificationsEnabledWithCompletion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
@end

extern void SetUpPUPushHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PUPushHostApi> *_Nullable api);

extern void SetUpPUPushHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PUPushHostApi> *_Nullable api, NSString *messageChannelSuffix);

/// The codec used by PUPushFlutterApi.
NSObject<FlutterMessageCodec> *PUPushFlutterApiGetCodec(void);

@interface PUPushFlutterApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger messageChannelSuffix:(nullable NSString *)messageChannelSuffix;
- (void)onMessageMessage:(PURemoteMessage *)message completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onBackgroundMessageMessage:(PURemoteMessage *)message completion:(void (^)(FlutterError *_Nullable))completion;
/// Unfortunately, the intent provided to the app when a user taps on a
/// notification does not include notification's title or body.
/// In this instance, it makes more sense to remove this useful functionality from iOS too.
/// Only the data property on the RemoteMessage is returned to the user.
/// This is effectively the lowest common denominator API.
///
/// Hint: You can still include the title, body or other metadata in your
/// data payload to identify what notification the user tapped on.
- (void)onNotificationTapData:(NSDictionary<NSString *, id> *)data completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onNewTokenToken:(NSString *)token completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onOpenNotificationSettingsWithCompletion:(void (^)(FlutterError *_Nullable))completion;
@end

NS_ASSUME_NONNULL_END
